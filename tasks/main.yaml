- name: jail root dataset
  zfs:
    name: "{{ jail.root.dataset }}"
    state: present
    extra_zfs_properties:
      mountpoint: "{{ jail.root.mountpoint }}"

- name: templates directory
  file:
    path: "{{ jail.root.mountpoint }}/.template"
    state: directory
    owner: root
    group: 0
    mode: 0700

- name: jail.conf generic part
  blockinfile:
    path: /etc/jail.conf
    mode: 0644
    create: yes # noqa yaml[truthy]
    marker: "# {mark} ANSIBLE MANAGED: default"
    block: |
      path = "{{ jail.root.mountpoint }}/$name";
      exec.clean;
      exec.system_user = "root";
      exec.jail_user = "root";
      exec.consolelog = "/var/log/jail_${name}_console.log";
      vnet;
      exec.start = "/bin/sh /etc/rc";
      exec.stop = "/bin/sh /etc/rc.shutdown";
      mount.devfs;
      host.hostname = "$name";


- name: check if automated jail install is already available in bsdinstall jail script
  command: "grep SCRIPT /usr/libexec/bsdinstall/jail"
  register: scripted_jail
  ignore_errors: true
  changed_when: false

- name: patch jail bsdinstall-subcommand if needed
  ansible.posix.patch:
    src: jail.patch
    basedir: /usr/libexec/bsdinstall
    strip: 4
  when: scripted_jail.rc != 0

- name: install jib script
  copy:
    src: /usr/share/examples/jails/jib
    dest: /usr/local/sbin/
    remote_src: yes # noqa yaml[truthy]
    mode: 0755

- name: iterate through jails on this host
  include_tasks: jail.yaml
  with_inventory_hostnames:
    - "{{ jail.child_group }}"
  loop_control:
    loop_var: jailname
  when: hostvars[jailname].get('jail', {}).get('parent', ansible_host) == ansible_host

- name: enable jail service
  community.general.sysrc:
    name: jail_enable
    value: 'YES'
    state: present
