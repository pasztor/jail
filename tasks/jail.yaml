- name: Debug jailname
  ansible.builtin.debug:
    var: jailname
  tags:
    - debug
    - never

- name: Set jail variables from jails hostvars[{{ jailname }}]
  ansible.builtin.set_fact:
    jailcfg: "{{ hostvars[jailname].get('jail') }}"

- name: Load OS specific preparations
  ansible.builtin.include_tasks: "pre-{{ jailcfg.os | default('FreeBSD') }}.yaml"

- name: Debug jailcfg
  ansible.builtin.debug:
    var: jailcfg
  tags:
    - debug
    - never

- name: Debug parent
  ansible.builtin.debug:
    var: ansible_host
  tags:
    - debug
    - never

- name: Debug jail
  ansible.builtin.debug:
    var: hostvars[jailname]
  tags:
    - debug
    - never

- name: ZFS dataset for the jail
  community.general.zfs:
    name: "{{ jail.root.dataset }}/{{ jailname }}"
    extra_zfs_properties:
      quota: "{{ jailcfg.quota | default(omit) }}"
    state: present

- name: Per jail specific configuration in jail.conf
  ansible.builtin.blockinfile:
    path: /etc/jail.conf
    marker: "# {mark} ANSIBLE MANAGED: {{ jailname }}"
    block: |
      {{ jailname }} {
      {% if jailcfg.hostname is defined %}
        host.hostname = "{{ jailcfg.hostname }}";
      {% endif %}
      {% for item in jailcfg.get('mounts', []) %}
      {%  if item is not string %}
        mount += "{{ item[0] }} {{ jail.root.mountpoint }}/{{ jailname }}{{ item[-1] }} nullfs defaults 0 0";
      {%  else %}
        mount += "{{ item }} {{ jail.root.mountpoint }}/{{ jailname }}{{ item }} nullfs defaults 0 0";
      {%  endif %}
      {% endfor %}
      {{ jailcfg_os | default('') }}
      {% if jailcfg.vnet is defined %}
      {%   if jailcfg.vnet is iterable and jailcfg.vnet is not string %}
      {%     for vnetif in jailcfg.vnet %}
        vnet.interface {% if loop.first %}={% else %}+={% endif %} "e{{ loop.index0 }}b_{{ jailname }}";
      {%     endfor %}
        exec.prestart += "jibs addm {{ jailname }} {{ jailcfg.vnet | join(' ') }}";
      {%   else %}
        vnet.interface = "e0b_{{ jailname }}";
        exec.prestart += "jibs addm {{ jailname }} {{ jailcfg.vnet }}";
      {%   endif %}
        exec.poststop += "jibs destroy {{ jailname }}";
      {% endif %}
      {% if jailcfg.custom is defined %}
      {%   for key, value in jailcfg.custom.items() %}
      {%     if value is iterable and value is not string %}
      {%       for ivalue in value %}
        {{ key }} += {% if ivalue is not number %}"{% endif %}{{ ivalue }}{% if ivalue is not number %}"{% endif %};
      {%       endfor %}
      {%     else %}
        {{ key }} = {% if value is not number %}"{% endif %}{{ value }}{% if value is not number %}"{% endif %};
      {%     endif %}
      {%   endfor %}
      {% endif %}
      }

# vnet.interface = "{{ hostvars[jailname].jail.inet }}b";

- name: Include OS specific install instructions
  ansible.builtin.include_tasks: "jail-{{ jailcfg.os | default('FreeBSD') }}.yaml"

- name: Create directories for mount on host side # noqa risky-file-permissions
  # NB.: The directory ownership and permissions could be anything. It should not be hardcoded at this point
  ansible.builtin.file:
    path: "{{ item[0] if item is iterable and item is not string else item }}"
    state: directory
  loop: "{{ jailcfg.mounts }}"
  when: jailcfg.mounts is defined

- name: Create directories for mount on jail side # noqa risky-file-permissions
  # NB.: The directory ownership and permissions could be anything. It should not be hardcoded at this point
  ansible.builtin.file:
    path: "{{ jail.root.mountpoint }}/{{ jailname }}{{ item[1] if item is iterable and item is not string else item }}"
    state: directory
  loop: "{{ jailcfg.mounts }}"
  when: jailcfg.mounts is defined

- name: Name resolution in jail
  ansible.builtin.copy:
    dest: "{{ jail.root.mountpoint }}/{{ jailname }}/etc/resolv.conf"
    mode: '0644'
    owner: root
    group: 0
    content: |
      {% if jailcfg.ns_search is defined %}
      search {{ jailcfg.ns_search }}
      {% endif %}
      {% if jailcfg.ns_server is iterable and jailcfg.ns_server is not string %}
      {% for ns in jailcfg.ns_server %}
      nameserver {{ ns }}
      {% endfor %}
      {% else %}
      nameserver {{ jailcfg.ns_server }}
      {% endif %}

- name: Add/remove jail to autostart list if needed
  community.general.sysrc:
    name: jail_list
    value: "{{ jailname }}"
    state: "{{ 'value_present' if jailcfg.autostart else 'value_absent' }}"
  when: jailcfg.autostart is defined
