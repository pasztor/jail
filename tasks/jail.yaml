- name: debug jailname
  debug:
    var: jailname
  tags:
    - debug
    - never

- name: set jail variables from jails hostvars
  set_fact:
    jailcfg: "{{ hostvars[jailname].get('jail') }}"

- name: debug jailcfg
  debug:
    var: jailcfg
  tags:
    - debug
    - never

- name: debug parent
  debug:
    var: ansible_host
  tags:
    - debug
    - never

- name: debug jail
  debug:
    var: hostvars[jailname]
  tags:
    - debug
    - never

- name: zfs dataset for the jail
  zfs:
    name: "{{ jail.root.dataset }}/{{ jailname }}"
    state: present

- name: create directories for mount on host side # noqa risky-file-permissions
  # NB.: The directory ownership and permissions could be anything. It should not be hardcoded at this point
  file:
    path: "{{ item[0] if item is iterable and item is not string else item }}"
    state: directory
  loop: "{{ jailcfg.mounts }}"

- name: create directories for mount on jail side # noqa risky-file-permissions
  # NB.: The directory ownership and permissions could be anything. It should not be hardcoded at this point
  file:
    path: "{{ jail.root.mountpoint }}/{{ jailname }}{{ item[1] if item is iterable and item is not string else item }}"
    state: directory
  loop: "{{ jailcfg.mounts }}"

- name: per jail specific configuration in jail.conf
  blockinfile:
    path: /etc/jail.conf
    marker: "# {mark} ANSIBLE MANAGED: {{ jailname }}"
    block: |
      {{ jailname }} {
      {% if jailcfg.hostname is defined %}
        host.hostname = "{{ jailcfg.hostname }}";
      {% endif %}
      {% for item in jailcfg.get('mounts',[]) %}
      {%  if item is not string %}
        mount += "{{ item[0] }} {{ jail.root.mountpoint }}/{{ jailname }}{{ item[-1] }} nullfs defaults 0 0";
      {%  else %}
        mount += "{{ item }} {{ jail.root.mountpoint }}/{{ jailname }}{{ item }} nullfs defaults 0 0";
      {%  endif %}
      {% endfor %}
      {% if jailcfg.vnet is iterable and jailcfg.vnet is not string %}
      {% for vnetif in jailcfg.vnet %}
        vnet.interface {% if loop.first %}={% else %}+={% endif %} "e{{ loop.index0 }}b_{{ jailname }}";
      {% endfor %}
        exec.prestart += "jib addm -b _br {{ jailname }} \!{{ jailcfg.vnet|join(' \!') }}";
      {% else %}
        vnet.interface = "e0b_{{ jailname }}";
        exec.prestart += "jib addm {{ jailname }} {{ jailcfg.vnet }}";
        # else branch
      {% endif %}
        exec.poststop += "jib destroy {{ jailname }}";
      {% for key, value in jailcfg.custom.items() %}
        {{ key }} = {% if value is not number %}"{% endif %}{{ value }}{% if value is not number %}"{% endif %};
      {% endfor %}
      }

# vnet.interface = "{{ hostvars[jailname].jail.inet }}b";

- name: bsdinstall template script
  copy:
    dest: "{{ jail.root.mountpoint }}/.template/{{ jailname }}"
    mode: 0644
    content: |
      DISTRIBUTIONS="base.txz"
      export nonInteractive="YES"
      #!/bin/sh
      pkg install -y {{ jail.python | default('python3') }}
      sysrc sshd_enable="YES"
      {% for network in jailcfg.inet %}
      sysrc ifconfig_e{{ loop.index0 }}b_{{ jailname }}="{{ network }}"
      {% endfor %}
      sysrc defaultrouter={{ jailcfg.defaultrouter }}
      echo "{{ hostvars[jailname].get('ansible_user', jail.user) }}:{{ hostvars[jailname].get('ansible_user_uid','') }}:{{ hostvars[jailname].get('ansible_user_uid','') }}::::{{ hostvars[jailname].get('ansible_user_gecos','') }}:::" | adduser -w no -f -
      pkg install -y sudo
      echo "{{ hostvars[jailname].get('ansible_user', jail.user) }} ALL=(ALL) NOPASSWD: ALL" >/usr/local/etc/sudoers.d/{{ hostvars[jailname].get('ansible_user', jail.user) }}
      install -d -m 700 /home/{{ hostvars[jailname].get('ansible_user', jail.user) }}/.ssh
      echo "{{ jail.ssh_key }}" >/home/{{ hostvars[jailname].get('ansible_user', jail.user) }}/.ssh/authorized_keys
      chown -R {{ hostvars[jailname].get('ansible_user', jail.user) }}:{{ hostvars[jailname].get('ansible_user', jail.user) }} /home/{{ hostvars[jailname].get('ansible_user', jail.user) }}/.ssh

- name: bsdinstall jails # noqa command-instead-of-shell
  # You can't pass environemtn variables using the command module
  shell: bsdinstall jail "{{ jail.root.mountpoint }}/{{ jailname }}"
  environment:
    SCRIPT: "{{ jail.root.mountpoint }}/.template/{{ jailname }}"
  args:
    creates: "{{ jail.root.mountpoint }}/{{ jailname }}/bin"

- name: network in the jail
  community.general.sysrc:
    jail: "{{ jailname }}"
    name: "ifconfig_e{{ index0 }}b_{{ jailname }}"
    value: "{{ item }}"
    state: present
  with_items: "{{ jailcfg.inet }}"
  loop_control:
    index_var: index0

- name: name resolution in jail
  copy:
    dest: "{{ jail.root.mountpoint }}/{{ jailname }}/etc/resolv.conf"
    mode: 0644
    owner: root
    group: 0
    content: |
      search {{ jailcfg.ns_search }}
      {% if jailcfg.ns_server is iterable and jailcfg.ns_server is not string %}
      {% for ns in jailcfg.ns_server %}
      nameserver {{ ns }}
      {% endfor %}
      {% else %}
      nameserver {{ jailcfg.ns_server }}
      {% endif %}
