- name: debug jailname
  debug:
    var: jailname
  tags:
    - debug
    - never

- name: set jail variables from jails hostvars[{{ jailname }}]
  set_fact:
    jailcfg: "{{ hostvars[jailname].get('jail') }}"

- name: debug jailcfg
  debug:
    var: jailcfg
  tags:
    - debug
    - never

- name: debug parent
  debug:
    var: ansible_host
  tags:
    - debug
    - never

- name: debug jail
  debug:
    var: hostvars[jailname]
  tags:
    - debug
    - never

- name: zfs dataset for the jail
  zfs:
    name: "{{ jail.root.dataset }}/{{ jailname }}"
    extra_zfs_properties:
      quota: "{{ jailcfg.quota | default(omit) }}"
    state: present

- name: per jail specific configuration in jail.conf
  blockinfile:
    path: /etc/jail.conf
    marker: "# {mark} ANSIBLE MANAGED: {{ jailname }}"
    block: |
      {{ jailname }} {
      {% if jailcfg.hostname is defined %}
        host.hostname = "{{ jailcfg.hostname }}";
      {% endif %}
      {% for item in jailcfg.get('mounts',[]) %}
      {%  if item is not string %}
        mount += "{{ item[0] }} {{ jail.root.mountpoint }}/{{ jailname }}{{ item[-1] }} nullfs defaults 0 0";
      {%  else %}
        mount += "{{ item }} {{ jail.root.mountpoint }}/{{ jailname }}{{ item }} nullfs defaults 0 0";
      {%  endif %}
      {% endfor %}
      {% if jailcfg.vnet is defined %}
      {%   if jailcfg.vnet is iterable and jailcfg.vnet is not string %}
      {%     for vnetif in jailcfg.vnet %}
        vnet.interface {% if loop.first %}={% else %}+={% endif %} "e{{ loop.index0 }}b_{{ jailname }}";
      {%     endfor %}
        exec.prestart += "jib addm -b _br {{ jailname }} \!{{ jailcfg.vnet | join(' \!') }}";
      {%   else %}
        vnet.interface = "e0b_{{ jailname }}";
        exec.prestart += "jib addm {{ jailname }} {{ jailcfg.vnet }}";
      {%   endif %}
        exec.poststop += "jib destroy {{ jailname }}";
      {% endif %}
      {% if jailcfg.custom is defined %}
      {%   for key, value in jailcfg.custom.items() %}
      {%     if value is iterable and value is not string %}
      {%       for ivalue in value %}
        {{ key }} += {% if ivalue is not number %}"{% endif %}{{ ivalue }}{% if ivalue is not number %}"{% endif %};
      {%       endfor %}
      {%     else %}
        {{ key }} = {% if value is not number %}"{% endif %}{{ value }}{% if value is not number %}"{% endif %};
      {%     endif %}
      {%   endfor %}
      {% endif %}
      }

# vnet.interface = "{{ hostvars[jailname].jail.inet }}b";

- name: bsdinstall template script
  copy:
    dest: "{{ jail.root.mountpoint }}/.template/{{ jailname }}"
    mode: 0644
    content: |
      DISTRIBUTIONS="base.txz"
      export nonInteractive="YES"
      #!/bin/sh
      IGNORE_OSVERSION=yes pkg install -y {{ jail.python | default('python') }}
      sysrc sshd_enable="YES"
      {% for network in jailcfg.inet | jail_net_conf(jailname) %}
      sysrc ifconfig_{{ network.ifname }}="{{ network.ifconf }}"
      {% endfor %}
      sysrc defaultrouter={{ jailcfg.defaultrouter }}
      {% set juser = hostvars[jailname].get('ansible_user', jail.user) %}
      {% set juid  = hostvars[jailname].get('ansible_user_uid','') %}
      {% set jgecos = hostvars[jailname].get('ansible_user_gecos','') %}
      echo "{{ juser }}:{{ juid }}:::::{{ jgecos }}:::" | adduser -w no -f -
      pkg install -y sudo
      echo "{{ juser }} ALL=(ALL) NOPASSWD: ALL" >/usr/local/etc/sudoers.d/{{ juser }}
      install -d -m 700 /home/{{ juser }}/.ssh
      echo "{{ jail.ssh_key }}" >/home/{{ juser }}/.ssh/authorized_keys
      chown -R {{ juser }}:{{ juser }} /home/{{ juser }}/.ssh

- name: bsdinstall jails # noqa command-instead-of-shell
  # You can't pass environemtn variables using the command module
  shell: bsdinstall jail "{{ jail.root.mountpoint }}/{{ jailname }}"
  environment:
    SCRIPT: "{{ jail.root.mountpoint }}/.template/{{ jailname }}"
    BSDINSTALL_DISTSITE: "{{ jail.mirror | default('http://ftp.freebsd.org/') | trim('/') }}/pub/FreeBSD/releases/{{ ansible_machine }}/{{ ansible_architecture }}/{{ ansible_distribution_release | regex_replace('-p\\d+$', '') }}" # noqa yaml[line-length]
  args:
    creates: "{{ jail.root.mountpoint }}/{{ jailname }}/bin"

- name: create directories for mount on host side # noqa risky-file-permissions
  # NB.: The directory ownership and permissions could be anything. It should not be hardcoded at this point
  file:
    path: "{{ item[0] if item is iterable and item is not string else item }}"
    state: directory
  loop: "{{ jailcfg.mounts }}"
  when: jailcfg.mounts is defined

- name: create directories for mount on jail side # noqa risky-file-permissions
  # NB.: The directory ownership and permissions could be anything. It should not be hardcoded at this point
  file:
    path: "{{ jail.root.mountpoint }}/{{ jailname }}{{ item[1] if item is iterable and item is not string else item }}"
    state: directory
  loop: "{{ jailcfg.mounts }}"
  when: jailcfg.mounts is defined

- name: setup network when jail is already running
  community.general.sysrc:
    # jail: parameter works only, if the jail is running. This way, it's 100% sure, the change happens
    path: "{{ jail.root.mountpoint }}/{{ jailname }}/etc/rc.conf"
    name: "ifconfig_{{ item.ifname }}"
    value: "{{ item.ifconf }}"
    state: present
  loop: "{{ jailcfg.inet | jail_net_conf(jailname) }}"

- name: name resolution in jail
  copy:
    dest: "{{ jail.root.mountpoint }}/{{ jailname }}/etc/resolv.conf"
    mode: 0644
    owner: root
    group: 0
    content: |
      {% if jailcfg.ns_search is defined %}
      search {{ jailcfg.ns_search }}
      {% endif %}
      {% if jailcfg.ns_server is iterable and jailcfg.ns_server is not string %}
      {% for ns in jailcfg.ns_server %}
      nameserver {{ ns }}
      {% endfor %}
      {% else %}
      nameserver {{ jailcfg.ns_server }}
      {% endif %}

- name: add/remove jail to autostart list if needed
  community.general.sysrc:
    name: jail_list
    value: "{{ jailname }}"
    state: "{{ 'value_present' if jailcfg.autostart else 'value_absent' }}"
  when: jailcfg.autostart is defined
